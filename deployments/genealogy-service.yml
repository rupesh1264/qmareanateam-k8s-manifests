#encrypt the username and passwd
#echo -n 'postgres' | base64
#echo -n 'postgrespass' | base64
#
--- 
apiVersion: v1
data: 
  dbpasswd: cG9zdGdyZXNwYXNz 
  dbuser: cG9zdGdyZXM= 
  nuser: bmVvNGo=
  npasswd: TWFyZWFuYUAxOTA=
kind: Secret
metadata: 
  name: genealogy-service-v3-5
  namespace: mi-v3-5
type: Opaque

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: genealogy-service-v3-5
  namespace: mi-v3-5
  labels: #Labels
    app: genealogy-service-v3-5
    ver: pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    server: 192.168.136.214
    path: "/mnt/nfs_share/mi-v3-5/genealogy-service-v3-5"


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: genealogy-service-v3-5-pvc
  namespace: mi-v3-5
spec:
  selector:
    matchLabels:  #Select a volume with this labels
      app: genealogy-service-v3-5
      ver: pv
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi



---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: genealogy-service-v3-5
  namespace: mi-v3-5
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: genealogy-service-v3-5
  strategy:
      type: RollingUpdate
  template:
    metadata:
      labels:
        app: genealogy-service-v3-5
    spec:
      nodeSelector:
         Name: "mi-v3-5"
      imagePullSecrets:
        - name: regcred
      volumes:
        - name: logs
          persistentVolumeClaim:
             claimName: genealogy-service-v3-5-pvc
      hostAliases:
        - ip: "192.168.135.212"
          hostnames:
          - "postgres"
        - ip: "192.168.142.38"
          hostnames:
          - "neo4j"
      containers:
        - image: registry.cloud.mareana.com/mdh3-5-cpv/dev/mdh3-5-genealogy-service:44
          name: genealogy-service-v3-5
          imagePullPolicy: Always
          command: 
          - gunicorn
          - --reload 
          - --bind=0.0.0.0:5000
          - --workers=2 
          - --timeout=3600 
          - rest_api_connexion:create_app()
          ports:
          - name: service-port
            containerPort: 5000
          env:
            - name: "CONFIG_PATH"
              value: "config.json"
            - name: "POSTGRES_HOST"
              value: "postgres"
            - name: "POSTGRES_PORT_FOR_GENEALOGY"
              value: "5432"
            - name: "POSTGRES_HOST_FOR_GENEALOGY"
              value: "postgres"
            - name: "POSTGRES_DATABASE_NAME_FOR_GENEALOGY"
              value: "mdh3-5"
            - name: "LOGS"
              value: "/var/log/genealogy-service/"
            - name: "POSTGRES_USER"
              valueFrom:
                secretKeyRef:
                  key: dbuser
                  name: "genealogy-service-v3-5"
            - name: "POSTGRES_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: dbpasswd
                  name: "genealogy-service-v3-5"
            - name: "NEO4J_USER"
              valueFrom:
                secretKeyRef:
                  key: nuser
                  name: "genealogy-service-v3-5"
            - name: "NEO4J_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: npasswd
                  name: "genealogy-service-v3-5"
            - name: "NEO4J_URI"
              value: "bolt://neo4j:7687"
            - name: "RUN_SCHEMATHESIS"
              value: "False"
          volumeMounts:
            - name: logs
              mountPath: /var/log/genealogy-service 
          resources:
            requests:
              memory: 1Gi
              #  limits:
                  #   cpu: 200m
                  #  memory: 1Gi
---
apiVersion: v1     #service is enabled which is available in cluster , not outside .  Because to discover by the depeendency pods 
kind: Service
metadata:
  name: genealogy-service-v3-5
  namespace: mi-v3-5
spec:
  ports:
  - port: 5000
    targetPort: service-port
    protocol: TCP
  selector:
    app: genealogy-service-v3-5
  type: ClusterIP
---
apiVersion: autoscaling/v2beta1     # kubectl api-versions  (to check the versions of api w
kind: HorizontalPodAutoscaler
metadata:
  name: genealogy-service-v3-5-autoscaler
  namespace: mi-v3-5
spec:
  scaleTargetRef:
          #apiVersion: extensions/v1beta1
    apiVersion: apps/v1
    kind: Deployment
    name: genealogy-service-v3-5
  minReplicas: 1
  maxReplicas: 10
  #  targetCPUUtilizationPercentage: 80
  metrics:
          #  - type: Resource
          #resource:
          # name: cpu
          #      targetAverageUtilization: 80
  - type: Resource
    resource:
      name: memory
      # targetAverageValue: 200Mi  not work, changed to below
      targetAverageUtilization: 90


